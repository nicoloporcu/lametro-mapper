// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

#include "gtfs-realtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace transit_realtime {
constexpr FeedMessage::FeedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_()
  , header_(nullptr){}
struct FeedMessageDefaultTypeInternal {
  constexpr FeedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeedMessageDefaultTypeInternal() {}
  union {
    FeedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
constexpr FeedHeader::FeedHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gtfs_realtime_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(uint64_t{0u})
  , incrementality_(0)
{}
struct FeedHeaderDefaultTypeInternal {
  constexpr FeedHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeedHeaderDefaultTypeInternal() {}
  union {
    FeedHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeedHeaderDefaultTypeInternal _FeedHeader_default_instance_;
constexpr FeedEntity::FeedEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trip_update_(nullptr)
  , vehicle_(nullptr)
  , alert_(nullptr)
  , shape_(nullptr)
  , is_deleted_(false){}
struct FeedEntityDefaultTypeInternal {
  constexpr FeedEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeedEntityDefaultTypeInternal() {}
  union {
    FeedEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeedEntityDefaultTypeInternal _FeedEntity_default_instance_;
constexpr TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(int64_t{0})
  , delay_(0)
  , uncertainty_(0){}
struct TripUpdate_StopTimeEventDefaultTypeInternal {
  constexpr TripUpdate_StopTimeEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripUpdate_StopTimeEventDefaultTypeInternal() {}
  union {
    TripUpdate_StopTimeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripUpdate_StopTimeEventDefaultTypeInternal _TripUpdate_StopTimeEvent_default_instance_;
constexpr TripUpdate_StopTimeUpdate_StopTimeProperties::TripUpdate_StopTimeUpdate_StopTimeProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_stop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal {
  constexpr TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal() {}
  union {
    TripUpdate_StopTimeUpdate_StopTimeProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal _TripUpdate_StopTimeUpdate_StopTimeProperties_default_instance_;
constexpr TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arrival_(nullptr)
  , departure_(nullptr)
  , stop_time_properties_(nullptr)
  , stop_sequence_(0u)
  , schedule_relationship_(0)

  , departure_occupancy_status_(0)
{}
struct TripUpdate_StopTimeUpdateDefaultTypeInternal {
  constexpr TripUpdate_StopTimeUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripUpdate_StopTimeUpdateDefaultTypeInternal() {}
  union {
    TripUpdate_StopTimeUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripUpdate_StopTimeUpdateDefaultTypeInternal _TripUpdate_StopTimeUpdate_default_instance_;
constexpr TripUpdate_TripProperties::TripUpdate_TripProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TripUpdate_TripPropertiesDefaultTypeInternal {
  constexpr TripUpdate_TripPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripUpdate_TripPropertiesDefaultTypeInternal() {}
  union {
    TripUpdate_TripProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripUpdate_TripPropertiesDefaultTypeInternal _TripUpdate_TripProperties_default_instance_;
constexpr TripUpdate::TripUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_time_update_()
  , trip_(nullptr)
  , vehicle_(nullptr)
  , trip_properties_(nullptr)
  , timestamp_(uint64_t{0u})
  , delay_(0){}
struct TripUpdateDefaultTypeInternal {
  constexpr TripUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripUpdateDefaultTypeInternal() {}
  union {
    TripUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripUpdateDefaultTypeInternal _TripUpdate_default_instance_;
constexpr VehiclePosition_CarriageDetails::VehiclePosition_CarriageDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , carriage_sequence_(0u)
  , occupancy_status_(7)

  , occupancy_percentage_(-1){}
struct VehiclePosition_CarriageDetailsDefaultTypeInternal {
  constexpr VehiclePosition_CarriageDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehiclePosition_CarriageDetailsDefaultTypeInternal() {}
  union {
    VehiclePosition_CarriageDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehiclePosition_CarriageDetailsDefaultTypeInternal _VehiclePosition_CarriageDetails_default_instance_;
constexpr VehiclePosition::VehiclePosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multi_carriage_details_()
  , stop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trip_(nullptr)
  , position_(nullptr)
  , vehicle_(nullptr)
  , current_stop_sequence_(0u)
  , congestion_level_(0)

  , timestamp_(uint64_t{0u})
  , occupancy_status_(0)

  , occupancy_percentage_(0u)
  , current_status_(2)
{}
struct VehiclePositionDefaultTypeInternal {
  constexpr VehiclePositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehiclePositionDefaultTypeInternal() {}
  union {
    VehiclePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehiclePositionDefaultTypeInternal _VehiclePosition_default_instance_;
constexpr Alert::Alert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_period_()
  , informed_entity_()
  , url_(nullptr)
  , header_text_(nullptr)
  , description_text_(nullptr)
  , tts_header_text_(nullptr)
  , tts_description_text_(nullptr)
  , image_(nullptr)
  , image_alternative_text_(nullptr)
  , severity_level_(1)

  , cause_(1)

  , effect_(8)
{}
struct AlertDefaultTypeInternal {
  constexpr AlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlertDefaultTypeInternal() {}
  union {
    Alert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlertDefaultTypeInternal _Alert_default_instance_;
constexpr TimeRange::TimeRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(uint64_t{0u})
  , end_(uint64_t{0u}){}
struct TimeRangeDefaultTypeInternal {
  constexpr TimeRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , odometer_(0)
  , bearing_(0)
  , speed_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr TripDescriptor::TripDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trip_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schedule_relationship_(0)

  , direction_id_(0u){}
struct TripDescriptorDefaultTypeInternal {
  constexpr TripDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TripDescriptorDefaultTypeInternal() {}
  union {
    TripDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TripDescriptorDefaultTypeInternal _TripDescriptor_default_instance_;
constexpr VehicleDescriptor::VehicleDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_plate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VehicleDescriptorDefaultTypeInternal {
  constexpr VehicleDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleDescriptorDefaultTypeInternal() {}
  union {
    VehicleDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleDescriptorDefaultTypeInternal _VehicleDescriptor_default_instance_;
constexpr EntitySelector::EntitySelector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agency_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trip_(nullptr)
  , route_type_(0)
  , direction_id_(0u){}
struct EntitySelectorDefaultTypeInternal {
  constexpr EntitySelectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EntitySelectorDefaultTypeInternal() {}
  union {
    EntitySelector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EntitySelectorDefaultTypeInternal _EntitySelector_default_instance_;
constexpr TranslatedString_Translation::TranslatedString_Translation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TranslatedString_TranslationDefaultTypeInternal {
  constexpr TranslatedString_TranslationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslatedString_TranslationDefaultTypeInternal() {}
  union {
    TranslatedString_Translation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslatedString_TranslationDefaultTypeInternal _TranslatedString_Translation_default_instance_;
constexpr TranslatedString::TranslatedString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : translation_(){}
struct TranslatedStringDefaultTypeInternal {
  constexpr TranslatedStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslatedStringDefaultTypeInternal() {}
  union {
    TranslatedString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslatedStringDefaultTypeInternal _TranslatedString_default_instance_;
constexpr TranslatedImage_LocalizedImage::TranslatedImage_LocalizedImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , media_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TranslatedImage_LocalizedImageDefaultTypeInternal {
  constexpr TranslatedImage_LocalizedImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslatedImage_LocalizedImageDefaultTypeInternal() {}
  union {
    TranslatedImage_LocalizedImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslatedImage_LocalizedImageDefaultTypeInternal _TranslatedImage_LocalizedImage_default_instance_;
constexpr TranslatedImage::TranslatedImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localized_image_(){}
struct TranslatedImageDefaultTypeInternal {
  constexpr TranslatedImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslatedImageDefaultTypeInternal() {}
  union {
    TranslatedImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslatedImageDefaultTypeInternal _TranslatedImage_default_instance_;
constexpr Shape::Shape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoded_polyline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ShapeDefaultTypeInternal {
  constexpr ShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeDefaultTypeInternal() {}
  union {
    Shape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace transit_realtime
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gtfs_2drealtime_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gtfs_2drealtime_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gtfs_2drealtime_2eproto = nullptr;

const uint32_t TableStruct_gtfs_2drealtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, header_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, entity_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, gtfs_realtime_version_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, incrementality_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, timestamp_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, is_deleted_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, trip_update_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, alert_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, shape_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, delay_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, uncertainty_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties, assigned_stop_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, arrival_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, departure_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, departure_occupancy_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, schedule_relationship_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, stop_time_properties_),
  4,
  0,
  1,
  2,
  6,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, start_date_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, start_time_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, shape_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, stop_time_update_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, delay_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, trip_properties_),
  0,
  1,
  ~0u,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, label_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, occupancy_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, occupancy_percentage_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, carriage_sequence_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, position_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, current_stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, current_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, timestamp_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, congestion_level_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, occupancy_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, occupancy_percentage_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, multi_carriage_details_),
  1,
  3,
  2,
  4,
  0,
  9,
  6,
  5,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, active_period_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, informed_entity_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, cause_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, effect_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, url_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, header_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, description_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, tts_header_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, tts_description_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, severity_level_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, image_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, image_alternative_text_),
  ~0u,
  ~0u,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, start_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, bearing_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, odometer_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, speed_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, direction_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, start_time_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, start_date_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, schedule_relationship_),
  0,
  3,
  5,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, label_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, license_plate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, agency_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, route_type_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, direction_id_),
  0,
  1,
  4,
  3,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, language_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, translation_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, url_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, media_type_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage_LocalizedImage, language_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedImage, localized_image_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Shape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Shape, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Shape, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Shape, shape_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Shape, encoded_polyline_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::transit_realtime::FeedMessage)},
  { 10, 19, -1, sizeof(::transit_realtime::FeedHeader)},
  { 22, 34, -1, sizeof(::transit_realtime::FeedEntity)},
  { 40, 49, -1, sizeof(::transit_realtime::TripUpdate_StopTimeEvent)},
  { 52, 59, -1, sizeof(::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties)},
  { 60, 73, -1, sizeof(::transit_realtime::TripUpdate_StopTimeUpdate)},
  { 80, 90, -1, sizeof(::transit_realtime::TripUpdate_TripProperties)},
  { 94, 106, -1, sizeof(::transit_realtime::TripUpdate)},
  { 112, 123, -1, sizeof(::transit_realtime::VehiclePosition_CarriageDetails)},
  { 128, 145, -1, sizeof(::transit_realtime::VehiclePosition)},
  { 156, 174, -1, sizeof(::transit_realtime::Alert)},
  { 186, 194, -1, sizeof(::transit_realtime::TimeRange)},
  { 196, 207, -1, sizeof(::transit_realtime::Position)},
  { 212, 224, -1, sizeof(::transit_realtime::TripDescriptor)},
  { 230, 239, -1, sizeof(::transit_realtime::VehicleDescriptor)},
  { 242, 254, -1, sizeof(::transit_realtime::EntitySelector)},
  { 260, 268, -1, sizeof(::transit_realtime::TranslatedString_Translation)},
  { 270, -1, -1, sizeof(::transit_realtime::TranslatedString)},
  { 277, 286, -1, sizeof(::transit_realtime::TranslatedImage_LocalizedImage)},
  { 289, -1, -1, sizeof(::transit_realtime::TranslatedImage)},
  { 296, 304, -1, sizeof(::transit_realtime::Shape)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_FeedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_FeedHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_FeedEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripUpdate_StopTimeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripUpdate_StopTimeUpdate_StopTimeProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripUpdate_StopTimeUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripUpdate_TripProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_VehiclePosition_CarriageDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_VehiclePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_Alert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TripDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_VehicleDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_EntitySelector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TranslatedString_Translation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TranslatedString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TranslatedImage_LocalizedImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_TranslatedImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transit_realtime::_Shape_default_instance_),
};

const char descriptor_table_protodef_gtfs_2drealtime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gtfs-realtime.proto\022\020transit_realtime\""
  "y\n\013FeedMessage\022,\n\006header\030\001 \002(\0132\034.transit"
  "_realtime.FeedHeader\022,\n\006entity\030\002 \003(\0132\034.t"
  "ransit_realtime.FeedEntity*\006\010\350\007\020\320\017*\006\010\250F\020"
  "\220N\"\327\001\n\nFeedHeader\022\035\n\025gtfs_realtime_versi"
  "on\030\001 \002(\t\022Q\n\016incrementality\030\002 \001(\0162+.trans"
  "it_realtime.FeedHeader.Incrementality:\014F"
  "ULL_DATASET\022\021\n\ttimestamp\030\003 \001(\004\"4\n\016Increm"
  "entality\022\020\n\014FULL_DATASET\020\000\022\020\n\014DIFFERENTI"
  "AL\020\001*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\372\001\n\nFeedEntity\022\n\n\002i"
  "d\030\001 \002(\t\022\031\n\nis_deleted\030\002 \001(\010:\005false\0221\n\013tr"
  "ip_update\030\003 \001(\0132\034.transit_realtime.TripU"
  "pdate\0222\n\007vehicle\030\004 \001(\0132!.transit_realtim"
  "e.VehiclePosition\022&\n\005alert\030\005 \001(\0132\027.trans"
  "it_realtime.Alert\022&\n\005shape\030\006 \001(\0132\027.trans"
  "it_realtime.Shape*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\353\010\n\nTr"
  "ipUpdate\022.\n\004trip\030\001 \002(\0132 .transit_realtim"
  "e.TripDescriptor\0224\n\007vehicle\030\003 \001(\0132#.tran"
  "sit_realtime.VehicleDescriptor\022E\n\020stop_t"
  "ime_update\030\002 \003(\0132+.transit_realtime.Trip"
  "Update.StopTimeUpdate\022\021\n\ttimestamp\030\004 \001(\004"
  "\022\r\n\005delay\030\005 \001(\005\022D\n\017trip_properties\030\006 \001(\013"
  "2+.transit_realtime.TripUpdate.TripPrope"
  "rties\032Q\n\rStopTimeEvent\022\r\n\005delay\030\001 \001(\005\022\014\n"
  "\004time\030\002 \001(\003\022\023\n\013uncertainty\030\003 \001(\005*\006\010\350\007\020\320\017"
  "*\006\010\250F\020\220N\032\367\004\n\016StopTimeUpdate\022\025\n\rstop_sequ"
  "ence\030\001 \001(\r\022\017\n\007stop_id\030\004 \001(\t\022;\n\007arrival\030\002"
  " \001(\0132*.transit_realtime.TripUpdate.StopT"
  "imeEvent\022=\n\tdeparture\030\003 \001(\0132*.transit_re"
  "altime.TripUpdate.StopTimeEvent\022U\n\032depar"
  "ture_occupancy_status\030\007 \001(\01621.transit_re"
  "altime.VehiclePosition.OccupancyStatus\022j"
  "\n\025schedule_relationship\030\005 \001(\0162@.transit_"
  "realtime.TripUpdate.StopTimeUpdate.Sched"
  "uleRelationship:\tSCHEDULED\022\\\n\024stop_time_"
  "properties\030\006 \001(\0132>.transit_realtime.Trip"
  "Update.StopTimeUpdate.StopTimeProperties"
  "\032>\n\022StopTimeProperties\022\030\n\020assigned_stop_"
  "id\030\001 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"P\n\024ScheduleRela"
  "tionship\022\r\n\tSCHEDULED\020\000\022\013\n\007SKIPPED\020\001\022\013\n\007"
  "NO_DATA\020\002\022\017\n\013UNSCHEDULED\020\003*\006\010\350\007\020\320\017*\006\010\250F\020"
  "\220N\032k\n\016TripProperties\022\017\n\007trip_id\030\001 \001(\t\022\022\n"
  "\nstart_date\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\t\022\020\n"
  "\010shape_id\030\004 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N*\006\010\350\007\020\320\017*"
  "\006\010\250F\020\220N\"\337\t\n\017VehiclePosition\022.\n\004trip\030\001 \001("
  "\0132 .transit_realtime.TripDescriptor\0224\n\007v"
  "ehicle\030\010 \001(\0132#.transit_realtime.VehicleD"
  "escriptor\022,\n\010position\030\002 \001(\0132\032.transit_re"
  "altime.Position\022\035\n\025current_stop_sequence"
  "\030\003 \001(\r\022\017\n\007stop_id\030\007 \001(\t\022Z\n\016current_statu"
  "s\030\004 \001(\01623.transit_realtime.VehiclePositi"
  "on.VehicleStopStatus:\rIN_TRANSIT_TO\022\021\n\tt"
  "imestamp\030\005 \001(\004\022K\n\020congestion_level\030\006 \001(\016"
  "21.transit_realtime.VehiclePosition.Cong"
  "estionLevel\022K\n\020occupancy_status\030\t \001(\01621."
  "transit_realtime.VehiclePosition.Occupan"
  "cyStatus\022\034\n\024occupancy_percentage\030\n \001(\r\022Q"
  "\n\026multi_carriage_details\030\013 \003(\01321.transit"
  "_realtime.VehiclePosition.CarriageDetail"
  "s\032\331\001\n\017CarriageDetails\022\n\n\002id\030\001 \001(\t\022\r\n\005lab"
  "el\030\002 \001(\t\022^\n\020occupancy_status\030\003 \001(\01621.tra"
  "nsit_realtime.VehiclePosition.OccupancyS"
  "tatus:\021NO_DATA_AVAILABLE\022 \n\024occupancy_pe"
  "rcentage\030\004 \001(\005:\002-1\022\031\n\021carriage_sequence\030"
  "\005 \001(\r*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"G\n\021VehicleStopStat"
  "us\022\017\n\013INCOMING_AT\020\000\022\016\n\nSTOPPED_AT\020\001\022\021\n\rI"
  "N_TRANSIT_TO\020\002\"}\n\017CongestionLevel\022\034\n\030UNK"
  "NOWN_CONGESTION_LEVEL\020\000\022\024\n\020RUNNING_SMOOT"
  "HLY\020\001\022\017\n\013STOP_AND_GO\020\002\022\016\n\nCONGESTION\020\003\022\025"
  "\n\021SEVERE_CONGESTION\020\004\"\331\001\n\017OccupancyStatu"
  "s\022\t\n\005EMPTY\020\000\022\030\n\024MANY_SEATS_AVAILABLE\020\001\022\027"
  "\n\023FEW_SEATS_AVAILABLE\020\002\022\026\n\022STANDING_ROOM"
  "_ONLY\020\003\022\036\n\032CRUSHED_STANDING_ROOM_ONLY\020\004\022"
  "\010\n\004FULL\020\005\022\034\n\030NOT_ACCEPTING_PASSENGERS\020\006\022"
  "\025\n\021NO_DATA_AVAILABLE\020\007\022\021\n\rNOT_BOARDABLE\020"
  "\010*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\366\t\n\005Alert\0222\n\ractive_pe"
  "riod\030\001 \003(\0132\033.transit_realtime.TimeRange\022"
  "9\n\017informed_entity\030\005 \003(\0132 .transit_realt"
  "ime.EntitySelector\022;\n\005cause\030\006 \001(\0162\035.tran"
  "sit_realtime.Alert.Cause:\rUNKNOWN_CAUSE\022"
  ">\n\006effect\030\007 \001(\0162\036.transit_realtime.Alert"
  ".Effect:\016UNKNOWN_EFFECT\022/\n\003url\030\010 \001(\0132\".t"
  "ransit_realtime.TranslatedString\0227\n\013head"
  "er_text\030\n \001(\0132\".transit_realtime.Transla"
  "tedString\022<\n\020description_text\030\013 \001(\0132\".tr"
  "ansit_realtime.TranslatedString\022;\n\017tts_h"
  "eader_text\030\014 \001(\0132\".transit_realtime.Tran"
  "slatedString\022@\n\024tts_description_text\030\r \001"
  "(\0132\".transit_realtime.TranslatedString\022O"
  "\n\016severity_level\030\016 \001(\0162%.transit_realtim"
  "e.Alert.SeverityLevel:\020UNKNOWN_SEVERITY\022"
  "0\n\005image\030\017 \001(\0132!.transit_realtime.Transl"
  "atedImage\022B\n\026image_alternative_text\030\020 \001("
  "\0132\".transit_realtime.TranslatedString\"\330\001"
  "\n\005Cause\022\021\n\rUNKNOWN_CAUSE\020\001\022\017\n\013OTHER_CAUS"
  "E\020\002\022\025\n\021TECHNICAL_PROBLEM\020\003\022\n\n\006STRIKE\020\004\022\021"
  "\n\rDEMONSTRATION\020\005\022\014\n\010ACCIDENT\020\006\022\013\n\007HOLID"
  "AY\020\007\022\013\n\007WEATHER\020\010\022\017\n\013MAINTENANCE\020\t\022\020\n\014CO"
  "NSTRUCTION\020\n\022\023\n\017POLICE_ACTIVITY\020\013\022\025\n\021MED"
  "ICAL_EMERGENCY\020\014\"\335\001\n\006Effect\022\016\n\nNO_SERVIC"
  "E\020\001\022\023\n\017REDUCED_SERVICE\020\002\022\026\n\022SIGNIFICANT_"
  "DELAYS\020\003\022\n\n\006DETOUR\020\004\022\026\n\022ADDITIONAL_SERVI"
  "CE\020\005\022\024\n\020MODIFIED_SERVICE\020\006\022\020\n\014OTHER_EFFE"
  "CT\020\007\022\022\n\016UNKNOWN_EFFECT\020\010\022\016\n\nSTOP_MOVED\020\t"
  "\022\r\n\tNO_EFFECT\020\n\022\027\n\023ACCESSIBILITY_ISSUE\020\013"
  "\"H\n\rSeverityLevel\022\024\n\020UNKNOWN_SEVERITY\020\001\022"
  "\010\n\004INFO\020\002\022\013\n\007WARNING\020\003\022\n\n\006SEVERE\020\004*\006\010\350\007\020"
  "\320\017*\006\010\250F\020\220N\"7\n\tTimeRange\022\r\n\005start\030\001 \001(\004\022\013"
  "\n\003end\030\002 \001(\004*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"q\n\010Position\022"
  "\020\n\010latitude\030\001 \002(\002\022\021\n\tlongitude\030\002 \002(\002\022\017\n\007"
  "bearing\030\003 \001(\002\022\020\n\010odometer\030\004 \001(\001\022\r\n\005speed"
  "\030\005 \001(\002*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\315\002\n\016TripDescripto"
  "r\022\017\n\007trip_id\030\001 \001(\t\022\020\n\010route_id\030\005 \001(\t\022\024\n\014"
  "direction_id\030\006 \001(\r\022\022\n\nstart_time\030\002 \001(\t\022\022"
  "\n\nstart_date\030\003 \001(\t\022T\n\025schedule_relations"
  "hip\030\004 \001(\01625.transit_realtime.TripDescrip"
  "tor.ScheduleRelationship\"t\n\024ScheduleRela"
  "tionship\022\r\n\tSCHEDULED\020\000\022\t\n\005ADDED\020\001\022\017\n\013UN"
  "SCHEDULED\020\002\022\014\n\010CANCELED\020\003\022\023\n\013REPLACEMENT"
  "\020\005\032\002\010\001\022\016\n\nDUPLICATED\020\006*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"U"
  "\n\021VehicleDescriptor\022\n\n\002id\030\001 \001(\t\022\r\n\005label"
  "\030\002 \001(\t\022\025\n\rlicense_plate\030\003 \001(\t*\006\010\350\007\020\320\017*\006\010"
  "\250F\020\220N\"\260\001\n\016EntitySelector\022\021\n\tagency_id\030\001 "
  "\001(\t\022\020\n\010route_id\030\002 \001(\t\022\022\n\nroute_type\030\003 \001("
  "\005\022.\n\004trip\030\004 \001(\0132 .transit_realtime.TripD"
  "escriptor\022\017\n\007stop_id\030\005 \001(\t\022\024\n\014direction_"
  "id\030\006 \001(\r*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\246\001\n\020TranslatedS"
  "tring\022C\n\013translation\030\001 \003(\0132..transit_rea"
  "ltime.TranslatedString.Translation\032=\n\013Tr"
  "anslation\022\014\n\004text\030\001 \002(\t\022\020\n\010language\030\002 \001("
  "\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\301\001\n\017Tr"
  "anslatedImage\022I\n\017localized_image\030\001 \003(\01320"
  ".transit_realtime.TranslatedImage.Locali"
  "zedImage\032S\n\016LocalizedImage\022\013\n\003url\030\001 \002(\t\022"
  "\022\n\nmedia_type\030\002 \002(\t\022\020\n\010language\030\003 \001(\t*\006\010"
  "\350\007\020\320\017*\006\010\250F\020\220N*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"C\n\005Shape\022\020"
  "\n\010shape_id\030\001 \001(\t\022\030\n\020encoded_polyline\030\002 \001"
  "(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220NB\035\n\033com.google.transit"
  ".realtime"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gtfs_2drealtime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gtfs_2drealtime_2eproto = {
  false, false, 5529, descriptor_table_protodef_gtfs_2drealtime_2eproto, "gtfs-realtime.proto", 
  &descriptor_table_gtfs_2drealtime_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_gtfs_2drealtime_2eproto::offsets,
  file_level_metadata_gtfs_2drealtime_2eproto, file_level_enum_descriptors_gtfs_2drealtime_2eproto, file_level_service_descriptors_gtfs_2drealtime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gtfs_2drealtime_2eproto_getter() {
  return &descriptor_table_gtfs_2drealtime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gtfs_2drealtime_2eproto(&descriptor_table_gtfs_2drealtime_2eproto);
namespace transit_realtime {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeedHeader_Incrementality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[0];
}
bool FeedHeader_Incrementality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeedHeader_Incrementality FeedHeader::FULL_DATASET;
constexpr FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
constexpr FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
constexpr FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
constexpr int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[1];
}
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::UNSCHEDULED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
constexpr int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[2];
}
bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
constexpr int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[3];
}
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
constexpr VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
constexpr VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
constexpr VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
constexpr int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_OccupancyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[4];
}
bool VehiclePosition_OccupancyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_OccupancyStatus VehiclePosition::EMPTY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::MANY_SEATS_AVAILABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::FEW_SEATS_AVAILABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::STANDING_ROOM_ONLY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::CRUSHED_STANDING_ROOM_ONLY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::FULL;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::NOT_ACCEPTING_PASSENGERS;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::NO_DATA_AVAILABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::NOT_BOARDABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MIN;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MAX;
constexpr int VehiclePosition::OccupancyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_Cause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[5];
}
bool Alert_Cause_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Alert_Cause Alert::UNKNOWN_CAUSE;
constexpr Alert_Cause Alert::OTHER_CAUSE;
constexpr Alert_Cause Alert::TECHNICAL_PROBLEM;
constexpr Alert_Cause Alert::STRIKE;
constexpr Alert_Cause Alert::DEMONSTRATION;
constexpr Alert_Cause Alert::ACCIDENT;
constexpr Alert_Cause Alert::HOLIDAY;
constexpr Alert_Cause Alert::WEATHER;
constexpr Alert_Cause Alert::MAINTENANCE;
constexpr Alert_Cause Alert::CONSTRUCTION;
constexpr Alert_Cause Alert::POLICE_ACTIVITY;
constexpr Alert_Cause Alert::MEDICAL_EMERGENCY;
constexpr Alert_Cause Alert::Cause_MIN;
constexpr Alert_Cause Alert::Cause_MAX;
constexpr int Alert::Cause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_Effect_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[6];
}
bool Alert_Effect_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Alert_Effect Alert::NO_SERVICE;
constexpr Alert_Effect Alert::REDUCED_SERVICE;
constexpr Alert_Effect Alert::SIGNIFICANT_DELAYS;
constexpr Alert_Effect Alert::DETOUR;
constexpr Alert_Effect Alert::ADDITIONAL_SERVICE;
constexpr Alert_Effect Alert::MODIFIED_SERVICE;
constexpr Alert_Effect Alert::OTHER_EFFECT;
constexpr Alert_Effect Alert::UNKNOWN_EFFECT;
constexpr Alert_Effect Alert::STOP_MOVED;
constexpr Alert_Effect Alert::NO_EFFECT;
constexpr Alert_Effect Alert::ACCESSIBILITY_ISSUE;
constexpr Alert_Effect Alert::Effect_MIN;
constexpr Alert_Effect Alert::Effect_MAX;
constexpr int Alert::Effect_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_SeverityLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[7];
}
bool Alert_SeverityLevel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Alert_SeverityLevel Alert::UNKNOWN_SEVERITY;
constexpr Alert_SeverityLevel Alert::INFO;
constexpr Alert_SeverityLevel Alert::WARNING;
constexpr Alert_SeverityLevel Alert::SEVERE;
constexpr Alert_SeverityLevel Alert::SeverityLevel_MIN;
constexpr Alert_SeverityLevel Alert::SeverityLevel_MAX;
constexpr int Alert::SeverityLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[8];
}
bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::REPLACEMENT;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::DUPLICATED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
constexpr int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FeedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedMessage>()._has_bits_);
  static const ::transit_realtime::FeedHeader& header(const FeedMessage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::transit_realtime::FeedHeader&
FeedMessage::_Internal::header(const FeedMessage* msg) {
  return *msg->header_;
}
FeedMessage::FeedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  entity_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.FeedMessage)
}
FeedMessage::FeedMessage(const FeedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entity_(from.entity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  if (from._internal_has_header()) {
    header_ = new ::transit_realtime::FeedHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedMessage)
}

inline void FeedMessage::SharedCtor() {
header_ = nullptr;
}

FeedMessage::~FeedMessage() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FeedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FeedMessage::ArenaDtor(void* object) {
  FeedMessage* _this = reinterpret_cast< FeedMessage* >(object);
  (void)_this;
}
void FeedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  entity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .transit_realtime.FeedHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.FeedHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entity(i), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedMessage)
  return target;
}

size_t FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedMessage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .transit_realtime.FeedHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.FeedEntity entity = 2;
  total_size += 1UL * this->_internal_entity_size();
  for (const auto& msg : this->entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedMessage::GetClassData() const { return &_class_data_; }

void FeedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeedMessage *>(to)->MergeFrom(
      static_cast<const FeedMessage &>(from));
}


void FeedMessage::MergeFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entity_.MergeFrom(from.entity_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::transit_realtime::FeedHeader::MergeFrom(from._internal_header());
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entity_))
    return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void FeedMessage::InternalSwap(FeedMessage* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_.InternalSwap(&other->entity_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[0]);
}

// ===================================================================

class FeedHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedHeader>()._has_bits_);
  static void set_has_gtfs_realtime_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_incrementality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FeedHeader::FeedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.FeedHeader)
}
FeedHeader::FeedHeader(const FeedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  gtfs_realtime_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gtfs_realtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gtfs_realtime_version()) {
    gtfs_realtime_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gtfs_realtime_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&incrementality_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedHeader)
}

inline void FeedHeader::SharedCtor() {
gtfs_realtime_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gtfs_realtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&incrementality_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
}

FeedHeader::~FeedHeader() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FeedHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gtfs_realtime_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeedHeader::ArenaDtor(void* object) {
  FeedHeader* _this = reinterpret_cast< FeedHeader* >(object);
  (void)_this;
}
void FeedHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeedHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gtfs_realtime_version_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&incrementality_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string gtfs_realtime_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gtfs_realtime_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.FeedHeader.gtfs_realtime_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::FeedHeader_Incrementality_IsValid(val))) {
            _internal_set_incrementality(static_cast<::transit_realtime::FeedHeader_Incrementality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gtfs_realtime_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gtfs_realtime_version().data(), static_cast<int>(this->_internal_gtfs_realtime_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedHeader.gtfs_realtime_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gtfs_realtime_version(), target);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_incrementality(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedHeader)
  return target;
}

size_t FeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedHeader)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required string gtfs_realtime_version = 1;
  if (_internal_has_gtfs_realtime_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gtfs_realtime_version());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_incrementality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeedHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedHeader::GetClassData() const { return &_class_data_; }

void FeedHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeedHeader *>(to)->MergeFrom(
      static_cast<const FeedHeader &>(from));
}


void FeedHeader::MergeFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gtfs_realtime_version(from._internal_gtfs_realtime_version());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      incrementality_ = from.incrementality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedHeader::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FeedHeader::InternalSwap(FeedHeader* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gtfs_realtime_version_, lhs_arena,
      &other->gtfs_realtime_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedHeader, incrementality_)
      + sizeof(FeedHeader::incrementality_)
      - PROTOBUF_FIELD_OFFSET(FeedHeader, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[1]);
}

// ===================================================================

class FeedEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedEntity>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::transit_realtime::TripUpdate& trip_update(const FeedEntity* msg);
  static void set_has_trip_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::transit_realtime::VehiclePosition& vehicle(const FeedEntity* msg);
  static void set_has_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::transit_realtime::Alert& alert(const FeedEntity* msg);
  static void set_has_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::transit_realtime::Shape& shape(const FeedEntity* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::transit_realtime::TripUpdate&
FeedEntity::_Internal::trip_update(const FeedEntity* msg) {
  return *msg->trip_update_;
}
const ::transit_realtime::VehiclePosition&
FeedEntity::_Internal::vehicle(const FeedEntity* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::Alert&
FeedEntity::_Internal::alert(const FeedEntity* msg) {
  return *msg->alert_;
}
const ::transit_realtime::Shape&
FeedEntity::_Internal::shape(const FeedEntity* msg) {
  return *msg->shape_;
}
FeedEntity::FeedEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.FeedEntity)
}
FeedEntity::FeedEntity(const FeedEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_trip_update()) {
    trip_update_ = new ::transit_realtime::TripUpdate(*from.trip_update_);
  } else {
    trip_update_ = nullptr;
  }
  if (from._internal_has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehiclePosition(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  if (from._internal_has_alert()) {
    alert_ = new ::transit_realtime::Alert(*from.alert_);
  } else {
    alert_ = nullptr;
  }
  if (from._internal_has_shape()) {
    shape_ = new ::transit_realtime::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  is_deleted_ = from.is_deleted_;
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedEntity)
}

inline void FeedEntity::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trip_update_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_deleted_) -
    reinterpret_cast<char*>(&trip_update_)) + sizeof(is_deleted_));
}

FeedEntity::~FeedEntity() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedEntity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FeedEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_update_;
  if (this != internal_default_instance()) delete vehicle_;
  if (this != internal_default_instance()) delete alert_;
  if (this != internal_default_instance()) delete shape_;
}

void FeedEntity::ArenaDtor(void* object) {
  FeedEntity* _this = reinterpret_cast< FeedEntity* >(object);
  (void)_this;
}
void FeedEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeedEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trip_update_ != nullptr);
      trip_update_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(alert_ != nullptr);
      alert_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(shape_ != nullptr);
      shape_->Clear();
    }
  }
  is_deleted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.FeedEntity.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_deleted = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_deleted(&has_bits);
          is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Alert alert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Shape shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedEntity.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bool is_deleted = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_deleted(), target);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trip_update(this), target, stream);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vehicle(this), target, stream);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::alert(this), target, stream);
  }

  // optional .transit_realtime.Shape shape = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::shape(this), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedEntity)
  return target;
}

size_t FeedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedEntity)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required string id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .transit_realtime.TripUpdate trip_update = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trip_update_);
    }

    // optional .transit_realtime.VehiclePosition vehicle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional .transit_realtime.Alert alert = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alert_);
    }

    // optional .transit_realtime.Shape shape = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional bool is_deleted = 2 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeedEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedEntity::GetClassData() const { return &_class_data_; }

void FeedEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeedEntity *>(to)->MergeFrom(
      static_cast<const FeedEntity &>(from));
}


void FeedEntity::MergeFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trip_update()->::transit_realtime::TripUpdate::MergeFrom(from._internal_trip_update());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vehicle()->::transit_realtime::VehiclePosition::MergeFrom(from._internal_vehicle());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_alert()->::transit_realtime::Alert::MergeFrom(from._internal_alert());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_shape()->::transit_realtime::Shape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000020u) {
      is_deleted_ = from.is_deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEntity::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_trip_update()) {
    if (!trip_update_->IsInitialized()) return false;
  }
  if (_internal_has_vehicle()) {
    if (!vehicle_->IsInitialized()) return false;
  }
  if (_internal_has_alert()) {
    if (!alert_->IsInitialized()) return false;
  }
  if (_internal_has_shape()) {
    if (!shape_->IsInitialized()) return false;
  }
  return true;
}

void FeedEntity::InternalSwap(FeedEntity* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedEntity, is_deleted_)
      + sizeof(FeedEntity::is_deleted_)
      - PROTOBUF_FIELD_OFFSET(FeedEntity, trip_update_)>(
          reinterpret_cast<char*>(&trip_update_),
          reinterpret_cast<char*>(&other->trip_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[2]);
}

// ===================================================================

class TripUpdate_StopTimeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TripUpdate_StopTimeEvent>()._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripUpdate.StopTimeEvent)
}
TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncertainty_) -
    reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeEvent)
}

inline void TripUpdate_StopTimeEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uncertainty_) -
    reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripUpdate_StopTimeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TripUpdate_StopTimeEvent::ArenaDtor(void* object) {
  TripUpdate_StopTimeEvent* _this = reinterpret_cast< TripUpdate_StopTimeEvent* >(object);
  (void)_this;
}
void TripUpdate_StopTimeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripUpdate_StopTimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uncertainty_) -
        reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_StopTimeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uncertainty(&has_bits);
          uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_StopTimeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_delay(), target);
  }

  // optional int64 time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // optional int32 uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uncertainty(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeEvent)
  return target;
}

size_t TripUpdate_StopTimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeEvent)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    // optional int32 delay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
    }

    // optional int32 uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uncertainty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_StopTimeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripUpdate_StopTimeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_StopTimeEvent::GetClassData() const { return &_class_data_; }

void TripUpdate_StopTimeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripUpdate_StopTimeEvent *>(to)->MergeFrom(
      static_cast<const TripUpdate_StopTimeEvent &>(from));
}


void TripUpdate_StopTimeEvent::MergeFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      uncertainty_ = from.uncertainty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripUpdate_StopTimeEvent::InternalSwap(TripUpdate_StopTimeEvent* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeEvent, uncertainty_)
      + sizeof(TripUpdate_StopTimeEvent::uncertainty_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeEvent, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_StopTimeEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[3]);
}

// ===================================================================

class TripUpdate_StopTimeUpdate_StopTimeProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<TripUpdate_StopTimeUpdate_StopTimeProperties>()._has_bits_);
  static void set_has_assigned_stop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TripUpdate_StopTimeUpdate_StopTimeProperties::TripUpdate_StopTimeUpdate_StopTimeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
}
TripUpdate_StopTimeUpdate_StopTimeProperties::TripUpdate_StopTimeUpdate_StopTimeProperties(const TripUpdate_StopTimeUpdate_StopTimeProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  assigned_stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assigned_stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assigned_stop_id()) {
    assigned_stop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assigned_stop_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
}

inline void TripUpdate_StopTimeUpdate_StopTimeProperties::SharedCtor() {
assigned_stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assigned_stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TripUpdate_StopTimeUpdate_StopTimeProperties::~TripUpdate_StopTimeUpdate_StopTimeProperties() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripUpdate_StopTimeUpdate_StopTimeProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assigned_stop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TripUpdate_StopTimeUpdate_StopTimeProperties::ArenaDtor(void* object) {
  TripUpdate_StopTimeUpdate_StopTimeProperties* _this = reinterpret_cast< TripUpdate_StopTimeUpdate_StopTimeProperties* >(object);
  (void)_this;
}
void TripUpdate_StopTimeUpdate_StopTimeProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripUpdate_StopTimeUpdate_StopTimeProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripUpdate_StopTimeUpdate_StopTimeProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    assigned_stop_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_StopTimeUpdate_StopTimeProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string assigned_stop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_assigned_stop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_StopTimeUpdate_StopTimeProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string assigned_stop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assigned_stop_id().data(), static_cast<int>(this->_internal_assigned_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assigned_stop_id(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  return target;
}

size_t TripUpdate_StopTimeUpdate_StopTimeProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string assigned_stop_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assigned_stop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_StopTimeUpdate_StopTimeProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripUpdate_StopTimeUpdate_StopTimeProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_StopTimeUpdate_StopTimeProperties::GetClassData() const { return &_class_data_; }

void TripUpdate_StopTimeUpdate_StopTimeProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripUpdate_StopTimeUpdate_StopTimeProperties *>(to)->MergeFrom(
      static_cast<const TripUpdate_StopTimeUpdate_StopTimeProperties &>(from));
}


void TripUpdate_StopTimeUpdate_StopTimeProperties::MergeFrom(const TripUpdate_StopTimeUpdate_StopTimeProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_assigned_stop_id()) {
    _internal_set_assigned_stop_id(from._internal_assigned_stop_id());
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_StopTimeUpdate_StopTimeProperties::CopyFrom(const TripUpdate_StopTimeUpdate_StopTimeProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate_StopTimeProperties::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripUpdate_StopTimeUpdate_StopTimeProperties::InternalSwap(TripUpdate_StopTimeUpdate_StopTimeProperties* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assigned_stop_id_, lhs_arena,
      &other->assigned_stop_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_StopTimeUpdate_StopTimeProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[4]);
}

// ===================================================================

class TripUpdate_StopTimeUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TripUpdate_StopTimeUpdate>()._has_bits_);
  static void set_has_stop_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::transit_realtime::TripUpdate_StopTimeEvent& arrival(const TripUpdate_StopTimeUpdate* msg);
  static void set_has_arrival(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::transit_realtime::TripUpdate_StopTimeEvent& departure(const TripUpdate_StopTimeUpdate* msg);
  static void set_has_departure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_departure_occupancy_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_schedule_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties& stop_time_properties(const TripUpdate_StopTimeUpdate* msg);
  static void set_has_stop_time_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::transit_realtime::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::_Internal::arrival(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->arrival_;
}
const ::transit_realtime::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::_Internal::departure(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->departure_;
}
const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties&
TripUpdate_StopTimeUpdate::_Internal::stop_time_properties(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->stop_time_properties_;
}
TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}
TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stop_id()) {
    stop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_arrival()) {
    arrival_ = new ::transit_realtime::TripUpdate_StopTimeEvent(*from.arrival_);
  } else {
    arrival_ = nullptr;
  }
  if (from._internal_has_departure()) {
    departure_ = new ::transit_realtime::TripUpdate_StopTimeEvent(*from.departure_);
  } else {
    departure_ = nullptr;
  }
  if (from._internal_has_stop_time_properties()) {
    stop_time_properties_ = new ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties(*from.stop_time_properties_);
  } else {
    stop_time_properties_ = nullptr;
  }
  ::memcpy(&stop_sequence_, &from.stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&departure_occupancy_status_) -
    reinterpret_cast<char*>(&stop_sequence_)) + sizeof(departure_occupancy_status_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}

inline void TripUpdate_StopTimeUpdate::SharedCtor() {
stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&arrival_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&departure_occupancy_status_) -
    reinterpret_cast<char*>(&arrival_)) + sizeof(departure_occupancy_status_));
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripUpdate_StopTimeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete arrival_;
  if (this != internal_default_instance()) delete departure_;
  if (this != internal_default_instance()) delete stop_time_properties_;
}

void TripUpdate_StopTimeUpdate::ArenaDtor(void* object) {
  TripUpdate_StopTimeUpdate* _this = reinterpret_cast< TripUpdate_StopTimeUpdate* >(object);
  (void)_this;
}
void TripUpdate_StopTimeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripUpdate_StopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(arrival_ != nullptr);
      arrival_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(departure_ != nullptr);
      departure_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stop_time_properties_ != nullptr);
      stop_time_properties_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&stop_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&departure_occupancy_status_) -
        reinterpret_cast<char*>(&stop_sequence_)) + sizeof(departure_occupancy_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_StopTimeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stop_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stop_sequence(&has_bits);
          stop_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stop_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(val))) {
            _internal_set_schedule_relationship(static_cast<::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_time_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(val))) {
            _internal_set_departure_occupancy_status(static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_StopTimeUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stop_sequence = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop_sequence(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arrival(this), target, stream);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::departure(this), target, stream);
  }

  // optional string stop_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stop_id(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_schedule_relationship(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stop_time_properties(this), target, stream);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_departure_occupancy_status(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeUpdate)
  return target;
}

size_t TripUpdate_StopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeUpdate)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string stop_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_id());
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arrival_);
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *departure_);
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_time_properties_);
    }

    // optional uint32 stop_sequence = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_sequence());
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_schedule_relationship());
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_departure_occupancy_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_StopTimeUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripUpdate_StopTimeUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_StopTimeUpdate::GetClassData() const { return &_class_data_; }

void TripUpdate_StopTimeUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripUpdate_StopTimeUpdate *>(to)->MergeFrom(
      static_cast<const TripUpdate_StopTimeUpdate &>(from));
}


void TripUpdate_StopTimeUpdate::MergeFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stop_id(from._internal_stop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_arrival()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from._internal_arrival());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_departure()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from._internal_departure());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stop_time_properties()->::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties::MergeFrom(from._internal_stop_time_properties());
    }
    if (cached_has_bits & 0x00000010u) {
      stop_sequence_ = from.stop_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      schedule_relationship_ = from.schedule_relationship_;
    }
    if (cached_has_bits & 0x00000040u) {
      departure_occupancy_status_ = from.departure_occupancy_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_arrival()) {
    if (!arrival_->IsInitialized()) return false;
  }
  if (_internal_has_departure()) {
    if (!departure_->IsInitialized()) return false;
  }
  if (_internal_has_stop_time_properties()) {
    if (!stop_time_properties_->IsInitialized()) return false;
  }
  return true;
}

void TripUpdate_StopTimeUpdate::InternalSwap(TripUpdate_StopTimeUpdate* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stop_id_, lhs_arena,
      &other->stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeUpdate, departure_occupancy_status_)
      + sizeof(TripUpdate_StopTimeUpdate::departure_occupancy_status_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeUpdate, arrival_)>(
          reinterpret_cast<char*>(&arrival_),
          reinterpret_cast<char*>(&other->arrival_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_StopTimeUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[5]);
}

// ===================================================================

class TripUpdate_TripProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<TripUpdate_TripProperties>()._has_bits_);
  static void set_has_trip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TripUpdate_TripProperties::TripUpdate_TripProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripUpdate.TripProperties)
}
TripUpdate_TripProperties::TripUpdate_TripProperties(const TripUpdate_TripProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  trip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trip_id()) {
    trip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trip_id(), 
      GetArenaForAllocation());
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_date()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_time()) {
    start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_time(), 
      GetArenaForAllocation());
  }
  shape_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shape_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shape_id()) {
    shape_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.TripProperties)
}

inline void TripUpdate_TripProperties::SharedCtor() {
trip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shape_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shape_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TripUpdate_TripProperties::~TripUpdate_TripProperties() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.TripProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripUpdate_TripProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shape_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TripUpdate_TripProperties::ArenaDtor(void* object) {
  TripUpdate_TripProperties* _this = reinterpret_cast< TripUpdate_TripProperties* >(object);
  (void)_this;
}
void TripUpdate_TripProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripUpdate_TripProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripUpdate_TripProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.TripProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      trip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      shape_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_TripProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.TripProperties.trip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.TripProperties.start_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.TripProperties.start_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string shape_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_shape_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripUpdate.TripProperties.shape_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_TripProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.TripProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trip_id().data(), static_cast<int>(this->_internal_trip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.trip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trip_id(), target);
  }

  // optional string start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_date(), target);
  }

  // optional string start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_time(), target);
  }

  // optional string shape_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shape_id().data(), static_cast<int>(this->_internal_shape_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.shape_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_shape_id(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.TripProperties)
  return target;
}

size_t TripUpdate_TripProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.TripProperties)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string trip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trip_id());
    }

    // optional string start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_date());
    }

    // optional string start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_time());
    }

    // optional string shape_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shape_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_TripProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripUpdate_TripProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_TripProperties::GetClassData() const { return &_class_data_; }

void TripUpdate_TripProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripUpdate_TripProperties *>(to)->MergeFrom(
      static_cast<const TripUpdate_TripProperties &>(from));
}


void TripUpdate_TripProperties::MergeFrom(const TripUpdate_TripProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.TripProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trip_id(from._internal_trip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_date(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_start_time(from._internal_start_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_shape_id(from._internal_shape_id());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_TripProperties::CopyFrom(const TripUpdate_TripProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.TripProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_TripProperties::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripUpdate_TripProperties::InternalSwap(TripUpdate_TripProperties* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trip_id_, lhs_arena,
      &other->trip_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, lhs_arena,
      &other->start_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_time_, lhs_arena,
      &other->start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shape_id_, lhs_arena,
      &other->shape_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_TripProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[6]);
}

// ===================================================================

class TripUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TripUpdate>()._has_bits_);
  static const ::transit_realtime::TripDescriptor& trip(const TripUpdate* msg);
  static void set_has_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::transit_realtime::VehicleDescriptor& vehicle(const TripUpdate* msg);
  static void set_has_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::transit_realtime::TripUpdate_TripProperties& trip_properties(const TripUpdate* msg);
  static void set_has_trip_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::transit_realtime::TripDescriptor&
TripUpdate::_Internal::trip(const TripUpdate* msg) {
  return *msg->trip_;
}
const ::transit_realtime::VehicleDescriptor&
TripUpdate::_Internal::vehicle(const TripUpdate* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::TripUpdate_TripProperties&
TripUpdate::_Internal::trip_properties(const TripUpdate* msg) {
  return *msg->trip_properties_;
}
TripUpdate::TripUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  stop_time_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripUpdate)
}
TripUpdate::TripUpdate(const TripUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stop_time_update_(from.stop_time_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  if (from._internal_has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  if (from._internal_has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  if (from._internal_has_trip_properties()) {
    trip_properties_ = new ::transit_realtime::TripUpdate_TripProperties(*from.trip_properties_);
  } else {
    trip_properties_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate)
}

inline void TripUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&trip_)) + sizeof(delay_));
}

TripUpdate::~TripUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trip_;
  if (this != internal_default_instance()) delete vehicle_;
  if (this != internal_default_instance()) delete trip_properties_;
}

void TripUpdate::ArenaDtor(void* object) {
  TripUpdate* _this = reinterpret_cast< TripUpdate* >(object);
  (void)_this;
}
void TripUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  stop_time_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trip_properties_ != nullptr);
      trip_properties_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .transit_realtime.TripDescriptor trip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_time_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trip(this), target, stream);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_time_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stop_time_update(i), target, stream);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle(this), target, stream);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // optional int32 delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_delay(), target);
  }

  // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::trip_properties(this), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate)
  return target;
}

size_t TripUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .transit_realtime.TripDescriptor trip = 1;
  if (_internal_has_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trip_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  total_size += 1UL * this->_internal_stop_time_update_size();
  for (const auto& msg : this->stop_time_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .transit_realtime.VehicleDescriptor vehicle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trip_properties_);
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 delay = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate::GetClassData() const { return &_class_data_; }

void TripUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripUpdate *>(to)->MergeFrom(
      static_cast<const TripUpdate &>(from));
}


void TripUpdate::MergeFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stop_time_update_.MergeFrom(from.stop_time_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from._internal_trip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from._internal_vehicle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trip_properties()->::transit_realtime::TripUpdate_TripProperties::MergeFrom(from._internal_trip_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stop_time_update_))
    return false;
  if (_internal_has_trip()) {
    if (!trip_->IsInitialized()) return false;
  }
  if (_internal_has_vehicle()) {
    if (!vehicle_->IsInitialized()) return false;
  }
  if (_internal_has_trip_properties()) {
    if (!trip_properties_->IsInitialized()) return false;
  }
  return true;
}

void TripUpdate::InternalSwap(TripUpdate* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_time_update_.InternalSwap(&other->stop_time_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate, delay_)
      + sizeof(TripUpdate::delay_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate, trip_)>(
          reinterpret_cast<char*>(&trip_),
          reinterpret_cast<char*>(&other->trip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[7]);
}

// ===================================================================

class VehiclePosition_CarriageDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<VehiclePosition_CarriageDetails>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_occupancy_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_occupancy_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_carriage_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VehiclePosition_CarriageDetails::VehiclePosition_CarriageDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.VehiclePosition.CarriageDetails)
}
VehiclePosition_CarriageDetails::VehiclePosition_CarriageDetails(const VehiclePosition_CarriageDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&carriage_sequence_, &from.carriage_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupancy_percentage_) -
    reinterpret_cast<char*>(&carriage_sequence_)) + sizeof(occupancy_percentage_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehiclePosition.CarriageDetails)
}

inline void VehiclePosition_CarriageDetails::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
carriage_sequence_ = 0u;
occupancy_status_ = 7;
occupancy_percentage_ = -1;
}

VehiclePosition_CarriageDetails::~VehiclePosition_CarriageDetails() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehiclePosition.CarriageDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehiclePosition_CarriageDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehiclePosition_CarriageDetails::ArenaDtor(void* object) {
  VehiclePosition_CarriageDetails* _this = reinterpret_cast< VehiclePosition_CarriageDetails* >(object);
  (void)_this;
}
void VehiclePosition_CarriageDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehiclePosition_CarriageDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehiclePosition_CarriageDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehiclePosition.CarriageDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    carriage_sequence_ = 0u;
    occupancy_status_ = 7;
    occupancy_percentage_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehiclePosition_CarriageDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehiclePosition.CarriageDetails.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehiclePosition.CarriageDetails.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(val))) {
            _internal_set_occupancy_status(static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 occupancy_percentage = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_occupancy_percentage(&has_bits);
          occupancy_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 carriage_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_carriage_sequence(&has_bits);
          carriage_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehiclePosition_CarriageDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehiclePosition.CarriageDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_occupancy_status(), target);
  }

  // optional int32 occupancy_percentage = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_occupancy_percentage(), target);
  }

  // optional uint32 carriage_sequence = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_carriage_sequence(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehiclePosition.CarriageDetails)
  return target;
}

size_t VehiclePosition_CarriageDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehiclePosition.CarriageDetails)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional uint32 carriage_sequence = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_carriage_sequence());
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_occupancy_status());
    }

    // optional int32 occupancy_percentage = 4 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_occupancy_percentage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehiclePosition_CarriageDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehiclePosition_CarriageDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehiclePosition_CarriageDetails::GetClassData() const { return &_class_data_; }

void VehiclePosition_CarriageDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehiclePosition_CarriageDetails *>(to)->MergeFrom(
      static_cast<const VehiclePosition_CarriageDetails &>(from));
}


void VehiclePosition_CarriageDetails::MergeFrom(const VehiclePosition_CarriageDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      carriage_sequence_ = from.carriage_sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupancy_status_ = from.occupancy_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      occupancy_percentage_ = from.occupancy_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehiclePosition_CarriageDetails::CopyFrom(const VehiclePosition_CarriageDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition_CarriageDetails::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void VehiclePosition_CarriageDetails::InternalSwap(VehiclePosition_CarriageDetails* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  swap(carriage_sequence_, other->carriage_sequence_);
  swap(occupancy_status_, other->occupancy_status_);
  swap(occupancy_percentage_, other->occupancy_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehiclePosition_CarriageDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[8]);
}

// ===================================================================

class VehiclePosition::_Internal {
 public:
  using HasBits = decltype(std::declval<VehiclePosition>()._has_bits_);
  static const ::transit_realtime::TripDescriptor& trip(const VehiclePosition* msg);
  static void set_has_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::transit_realtime::VehicleDescriptor& vehicle(const VehiclePosition* msg);
  static void set_has_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::transit_realtime::Position& position(const VehiclePosition* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_stop_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_congestion_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_occupancy_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_occupancy_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::transit_realtime::TripDescriptor&
VehiclePosition::_Internal::trip(const VehiclePosition* msg) {
  return *msg->trip_;
}
const ::transit_realtime::VehicleDescriptor&
VehiclePosition::_Internal::vehicle(const VehiclePosition* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::Position&
VehiclePosition::_Internal::position(const VehiclePosition* msg) {
  return *msg->position_;
}
VehiclePosition::VehiclePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  multi_carriage_details_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.VehiclePosition)
}
VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      multi_carriage_details_(from.multi_carriage_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stop_id()) {
    stop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::transit_realtime::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  ::memcpy(&current_stop_sequence_, &from.current_stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_status_) -
    reinterpret_cast<char*>(&current_stop_sequence_)) + sizeof(current_status_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehiclePosition)
}

inline void VehiclePosition::SharedCtor() {
stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&occupancy_percentage_) -
    reinterpret_cast<char*>(&trip_)) + sizeof(occupancy_percentage_));
current_status_ = 2;
}

VehiclePosition::~VehiclePosition() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehiclePosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehiclePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete vehicle_;
}

void VehiclePosition::ArenaDtor(void* object) {
  VehiclePosition* _this = reinterpret_cast< VehiclePosition* >(object);
  (void)_this;
}
void VehiclePosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehiclePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehiclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehiclePosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  multi_carriage_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&current_stop_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupancy_status_) -
        reinterpret_cast<char*>(&current_stop_sequence_)) + sizeof(occupancy_status_));
  }
  if (cached_has_bits & 0x00000300u) {
    occupancy_percentage_ = 0u;
    current_status_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehiclePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_stop_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_current_stop_sequence(&has_bits);
          current_stop_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(val))) {
            _internal_set_current_status(static_cast<::transit_realtime::VehiclePosition_VehicleStopStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::VehiclePosition_CongestionLevel_IsValid(val))) {
            _internal_set_congestion_level(static_cast<::transit_realtime::VehiclePosition_CongestionLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string stop_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehiclePosition.stop_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(val))) {
            _internal_set_occupancy_status(static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 occupancy_percentage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_occupancy_percentage(&has_bits);
          occupancy_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_carriage_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehiclePosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehiclePosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trip(this), target, stream);
  }

  // optional .transit_realtime.Position position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional uint32 current_stop_sequence = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_stop_sequence(), target);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_current_status(), target);
  }

  // optional uint64 timestamp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_congestion_level(), target);
  }

  // optional string stop_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.stop_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_stop_id(), target);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vehicle(this), target, stream);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_occupancy_status(), target);
  }

  // optional uint32 occupancy_percentage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_occupancy_percentage(), target);
  }

  // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_carriage_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_multi_carriage_details(i), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehiclePosition)
  return target;
}

size_t VehiclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehiclePosition)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
  total_size += 1UL * this->_internal_multi_carriage_details_size();
  for (const auto& msg : this->multi_carriage_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stop_id = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_id());
    }

    // optional .transit_realtime.TripDescriptor trip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trip_);
    }

    // optional .transit_realtime.Position position = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional uint32 current_stop_sequence = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_stop_sequence());
    }

    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_congestion_level());
    }

    // optional uint64 timestamp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_occupancy_status());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 occupancy_percentage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_occupancy_percentage());
    }

    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehiclePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehiclePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehiclePosition::GetClassData() const { return &_class_data_; }

void VehiclePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehiclePosition *>(to)->MergeFrom(
      static_cast<const VehiclePosition &>(from));
}


void VehiclePosition::MergeFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehiclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  multi_carriage_details_.MergeFrom(from.multi_carriage_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stop_id(from._internal_stop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from._internal_trip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position()->::transit_realtime::Position::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from._internal_vehicle());
    }
    if (cached_has_bits & 0x00000010u) {
      current_stop_sequence_ = from.current_stop_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      congestion_level_ = from.congestion_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      occupancy_status_ = from.occupancy_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      occupancy_percentage_ = from.occupancy_percentage_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_status_ = from.current_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(multi_carriage_details_))
    return false;
  if (_internal_has_trip()) {
    if (!trip_->IsInitialized()) return false;
  }
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_vehicle()) {
    if (!vehicle_->IsInitialized()) return false;
  }
  return true;
}

void VehiclePosition::InternalSwap(VehiclePosition* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  multi_carriage_details_.InternalSwap(&other->multi_carriage_details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stop_id_, lhs_arena,
      &other->stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehiclePosition, occupancy_percentage_)
      + sizeof(VehiclePosition::occupancy_percentage_)
      - PROTOBUF_FIELD_OFFSET(VehiclePosition, trip_)>(
          reinterpret_cast<char*>(&trip_),
          reinterpret_cast<char*>(&other->trip_));
  swap(current_status_, other->current_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehiclePosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[9]);
}

// ===================================================================

class Alert::_Internal {
 public:
  using HasBits = decltype(std::declval<Alert>()._has_bits_);
  static void set_has_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::transit_realtime::TranslatedString& url(const Alert* msg);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::transit_realtime::TranslatedString& header_text(const Alert* msg);
  static void set_has_header_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::transit_realtime::TranslatedString& description_text(const Alert* msg);
  static void set_has_description_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::transit_realtime::TranslatedString& tts_header_text(const Alert* msg);
  static void set_has_tts_header_text(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::transit_realtime::TranslatedString& tts_description_text(const Alert* msg);
  static void set_has_tts_description_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_severity_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::transit_realtime::TranslatedImage& image(const Alert* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::transit_realtime::TranslatedString& image_alternative_text(const Alert* msg);
  static void set_has_image_alternative_text(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::transit_realtime::TranslatedString&
Alert::_Internal::url(const Alert* msg) {
  return *msg->url_;
}
const ::transit_realtime::TranslatedString&
Alert::_Internal::header_text(const Alert* msg) {
  return *msg->header_text_;
}
const ::transit_realtime::TranslatedString&
Alert::_Internal::description_text(const Alert* msg) {
  return *msg->description_text_;
}
const ::transit_realtime::TranslatedString&
Alert::_Internal::tts_header_text(const Alert* msg) {
  return *msg->tts_header_text_;
}
const ::transit_realtime::TranslatedString&
Alert::_Internal::tts_description_text(const Alert* msg) {
  return *msg->tts_description_text_;
}
const ::transit_realtime::TranslatedImage&
Alert::_Internal::image(const Alert* msg) {
  return *msg->image_;
}
const ::transit_realtime::TranslatedString&
Alert::_Internal::image_alternative_text(const Alert* msg) {
  return *msg->image_alternative_text_;
}
Alert::Alert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  active_period_(arena),
  informed_entity_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.Alert)
}
Alert::Alert(const Alert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      active_period_(from.active_period_),
      informed_entity_(from.informed_entity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  if (from._internal_has_url()) {
    url_ = new ::transit_realtime::TranslatedString(*from.url_);
  } else {
    url_ = nullptr;
  }
  if (from._internal_has_header_text()) {
    header_text_ = new ::transit_realtime::TranslatedString(*from.header_text_);
  } else {
    header_text_ = nullptr;
  }
  if (from._internal_has_description_text()) {
    description_text_ = new ::transit_realtime::TranslatedString(*from.description_text_);
  } else {
    description_text_ = nullptr;
  }
  if (from._internal_has_tts_header_text()) {
    tts_header_text_ = new ::transit_realtime::TranslatedString(*from.tts_header_text_);
  } else {
    tts_header_text_ = nullptr;
  }
  if (from._internal_has_tts_description_text()) {
    tts_description_text_ = new ::transit_realtime::TranslatedString(*from.tts_description_text_);
  } else {
    tts_description_text_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::transit_realtime::TranslatedImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_image_alternative_text()) {
    image_alternative_text_ = new ::transit_realtime::TranslatedString(*from.image_alternative_text_);
  } else {
    image_alternative_text_ = nullptr;
  }
  ::memcpy(&severity_level_, &from.severity_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&severity_level_)) + sizeof(effect_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Alert)
}

inline void Alert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&url_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_alternative_text_) -
    reinterpret_cast<char*>(&url_)) + sizeof(image_alternative_text_));
severity_level_ = 1;
cause_ = 1;
effect_ = 8;
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:transit_realtime.Alert)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Alert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete url_;
  if (this != internal_default_instance()) delete header_text_;
  if (this != internal_default_instance()) delete description_text_;
  if (this != internal_default_instance()) delete tts_header_text_;
  if (this != internal_default_instance()) delete tts_description_text_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete image_alternative_text_;
}

void Alert::ArenaDtor(void* object) {
  Alert* _this = reinterpret_cast< Alert* >(object);
  (void)_this;
}
void Alert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Alert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  active_period_.Clear();
  informed_entity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(url_ != nullptr);
      url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_text_ != nullptr);
      header_text_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(description_text_ != nullptr);
      description_text_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tts_header_text_ != nullptr);
      tts_header_text_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tts_description_text_ != nullptr);
      tts_description_text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(image_alternative_text_ != nullptr);
      image_alternative_text_->Clear();
    }
    severity_level_ = 1;
  }
  if (cached_has_bits & 0x00000300u) {
    cause_ = 1;
    effect_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_informed_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::Alert_Cause_IsValid(val))) {
            _internal_set_cause(static_cast<::transit_realtime::Alert_Cause>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::Alert_Effect_IsValid(val))) {
            _internal_set_effect(static_cast<::transit_realtime::Alert_Effect>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString tts_header_text = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tts_header_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString tts_description_text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tts_description_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::Alert_SeverityLevel_IsValid(val))) {
            _internal_set_severity_level(static_cast<::transit_realtime::Alert_SeverityLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedImage image = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TranslatedString image_alternative_text = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_alternative_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Alert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Alert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TimeRange active_period = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_period_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_active_period(i), target, stream);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_informed_entity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_informed_entity(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cause(), target);
  }

  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_effect(), target);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::url(this), target, stream);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::header_text(this), target, stream);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::description_text(this), target, stream);
  }

  // optional .transit_realtime.TranslatedString tts_header_text = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tts_header_text(this), target, stream);
  }

  // optional .transit_realtime.TranslatedString tts_description_text = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tts_description_text(this), target, stream);
  }

  // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_severity_level(), target);
  }

  // optional .transit_realtime.TranslatedImage image = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::image(this), target, stream);
  }

  // optional .transit_realtime.TranslatedString image_alternative_text = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::image_alternative_text(this), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Alert)
  return target;
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Alert)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TimeRange active_period = 1;
  total_size += 1UL * this->_internal_active_period_size();
  for (const auto& msg : this->active_period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  total_size += 1UL * this->_internal_informed_entity_size();
  for (const auto& msg : this->informed_entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .transit_realtime.TranslatedString url = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *url_);
    }

    // optional .transit_realtime.TranslatedString header_text = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_text_);
    }

    // optional .transit_realtime.TranslatedString description_text = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_text_);
    }

    // optional .transit_realtime.TranslatedString tts_header_text = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_header_text_);
    }

    // optional .transit_realtime.TranslatedString tts_description_text = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_description_text_);
    }

    // optional .transit_realtime.TranslatedImage image = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional .transit_realtime.TranslatedString image_alternative_text = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_alternative_text_);
    }

    // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity_level());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cause());
    }

    // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_effect());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Alert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Alert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Alert::GetClassData() const { return &_class_data_; }

void Alert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Alert *>(to)->MergeFrom(
      static_cast<const Alert &>(from));
}


void Alert::MergeFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  active_period_.MergeFrom(from.active_period_);
  informed_entity_.MergeFrom(from.informed_entity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_url()->::transit_realtime::TranslatedString::MergeFrom(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header_text()->::transit_realtime::TranslatedString::MergeFrom(from._internal_header_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_description_text()->::transit_realtime::TranslatedString::MergeFrom(from._internal_description_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tts_header_text()->::transit_realtime::TranslatedString::MergeFrom(from._internal_tts_header_text());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tts_description_text()->::transit_realtime::TranslatedString::MergeFrom(from._internal_tts_description_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_image()->::transit_realtime::TranslatedImage::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_image_alternative_text()->::transit_realtime::TranslatedString::MergeFrom(from._internal_image_alternative_text());
    }
    if (cached_has_bits & 0x00000080u) {
      severity_level_ = from.severity_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      cause_ = from.cause_;
    }
    if (cached_has_bits & 0x00000200u) {
      effect_ = from.effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(active_period_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(informed_entity_))
    return false;
  if (_internal_has_url()) {
    if (!url_->IsInitialized()) return false;
  }
  if (_internal_has_header_text()) {
    if (!header_text_->IsInitialized()) return false;
  }
  if (_internal_has_description_text()) {
    if (!description_text_->IsInitialized()) return false;
  }
  if (_internal_has_tts_header_text()) {
    if (!tts_header_text_->IsInitialized()) return false;
  }
  if (_internal_has_tts_description_text()) {
    if (!tts_description_text_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!image_->IsInitialized()) return false;
  }
  if (_internal_has_image_alternative_text()) {
    if (!image_alternative_text_->IsInitialized()) return false;
  }
  return true;
}

void Alert::InternalSwap(Alert* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  active_period_.InternalSwap(&other->active_period_);
  informed_entity_.InternalSwap(&other->informed_entity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alert, image_alternative_text_)
      + sizeof(Alert::image_alternative_text_)
      - PROTOBUF_FIELD_OFFSET(Alert, url_)>(
          reinterpret_cast<char*>(&url_),
          reinterpret_cast<char*>(&other->url_));
  swap(severity_level_, other->severity_level_);
  swap(cause_, other->cause_);
  swap(effect_, other->effect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Alert::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[10]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeRange>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TimeRange)
}

inline void TimeRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:transit_realtime.TimeRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeRange::ArenaDtor(void* object) {
  TimeRange* _this = reinterpret_cast< TimeRange* >(object);
  (void)_this;
}
void TimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start(), target);
  }

  // optional uint64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TimeRange)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
    }

    // optional uint64 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }

void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeRange *>(to)->MergeFrom(
      static_cast<const TimeRange &>(from));
}


void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, end_)
      + sizeof(TimeRange::end_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[11]);
}

// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bearing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_odometer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:transit_realtime.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bearing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_bearing(&has_bits);
          bearing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double odometer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_odometer(&has_bits);
          odometer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // required float longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // optional float bearing = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bearing(), target);
  }

  // optional double odometer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_odometer(), target);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transit_realtime.Position)
  size_t total_size = 0;

  if (_internal_has_latitude()) {
    // required float latitude = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_longitude()) {
    // required float longitude = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Position)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float latitude = 1;
    total_size += 1 + 4;

    // required float longitude = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional double odometer = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float bearing = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      odometer_ = from.odometer_;
    }
    if (cached_has_bits & 0x00000008u) {
      bearing_ = from.bearing_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, speed_)
      + sizeof(Position::speed_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[12]);
}

// ===================================================================

class TripDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TripDescriptor>()._has_bits_);
  static void set_has_trip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_route_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_direction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_schedule_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TripDescriptor::TripDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TripDescriptor)
}
TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  trip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trip_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trip_id()) {
    trip_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trip_id(), 
      GetArenaForAllocation());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_time()) {
    start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_time(), 
      GetArenaForAllocation());
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_date()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArenaForAllocation());
  }
  route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_route_id()) {
    route_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&schedule_relationship_, &from.schedule_relationship_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripDescriptor)
}

inline void TripDescriptor::SharedCtor() {
trip_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trip_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schedule_relationship_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
}

TripDescriptor::~TripDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TripDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trip_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TripDescriptor::ArenaDtor(void* object) {
  TripDescriptor* _this = reinterpret_cast< TripDescriptor* >(object);
  (void)_this;
}
void TripDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TripDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      trip_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      start_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      route_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&schedule_relationship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_id_) -
        reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trip_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripDescriptor.trip_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripDescriptor.start_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripDescriptor.start_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(val))) {
            _internal_set_schedule_relationship(static_cast<::transit_realtime::TripDescriptor_ScheduleRelationship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string route_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_route_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TripDescriptor.route_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_direction_id(&has_bits);
          direction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trip_id().data(), static_cast<int>(this->_internal_trip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.trip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trip_id(), target);
  }

  // optional string start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_time(), target);
  }

  // optional string start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_date(), target);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_schedule_relationship(), target);
  }

  // optional string route_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.route_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_route_id(), target);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_direction_id(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripDescriptor)
  return target;
}

size_t TripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripDescriptor)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string trip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trip_id());
    }

    // optional string start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_time());
    }

    // optional string start_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_date());
    }

    // optional string route_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_id());
    }

    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_schedule_relationship());
    }

    // optional uint32 direction_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direction_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TripDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripDescriptor::GetClassData() const { return &_class_data_; }

void TripDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TripDescriptor *>(to)->MergeFrom(
      static_cast<const TripDescriptor &>(from));
}


void TripDescriptor::MergeFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trip_id(from._internal_trip_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_time(from._internal_start_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_start_date(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_route_id(from._internal_route_id());
    }
    if (cached_has_bits & 0x00000010u) {
      schedule_relationship_ = from.schedule_relationship_;
    }
    if (cached_has_bits & 0x00000020u) {
      direction_id_ = from.direction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripDescriptor::InternalSwap(TripDescriptor* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trip_id_, lhs_arena,
      &other->trip_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_time_, lhs_arena,
      &other->start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_date_, lhs_arena,
      &other->start_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_id_, lhs_arena,
      &other->route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripDescriptor, direction_id_)
      + sizeof(TripDescriptor::direction_id_)
      - PROTOBUF_FIELD_OFFSET(TripDescriptor, schedule_relationship_)>(
          reinterpret_cast<char*>(&schedule_relationship_),
          reinterpret_cast<char*>(&other->schedule_relationship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[13]);
}

// ===================================================================

class VehicleDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleDescriptor>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_license_plate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VehicleDescriptor::VehicleDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.VehicleDescriptor)
}
VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  license_plate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_license_plate()) {
    license_plate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license_plate(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehicleDescriptor)
}

inline void VehicleDescriptor::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_plate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleDescriptor::~VehicleDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehicleDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_plate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleDescriptor::ArenaDtor(void* object) {
  VehicleDescriptor* _this = reinterpret_cast< VehicleDescriptor* >(object);
  (void)_this;
}
void VehicleDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehicleDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      license_plate_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehicleDescriptor.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehicleDescriptor.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string license_plate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_license_plate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.VehicleDescriptor.license_plate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehicleDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional string license_plate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_license_plate().data(), static_cast<int>(this->_internal_license_plate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.license_plate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_license_plate(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehicleDescriptor)
  return target;
}

size_t VehicleDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehicleDescriptor)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string license_plate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_license_plate());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleDescriptor::GetClassData() const { return &_class_data_; }

void VehicleDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleDescriptor *>(to)->MergeFrom(
      static_cast<const VehicleDescriptor &>(from));
}


void VehicleDescriptor::MergeFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehicleDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_license_plate(from._internal_license_plate());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void VehicleDescriptor::InternalSwap(VehicleDescriptor* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_plate_, lhs_arena,
      &other->license_plate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[14]);
}

// ===================================================================

class EntitySelector::_Internal {
 public:
  using HasBits = decltype(std::declval<EntitySelector>()._has_bits_);
  static void set_has_agency_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_route_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_route_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::transit_realtime::TripDescriptor& trip(const EntitySelector* msg);
  static void set_has_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::transit_realtime::TripDescriptor&
EntitySelector::_Internal::trip(const EntitySelector* msg) {
  return *msg->trip_;
}
EntitySelector::EntitySelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.EntitySelector)
}
EntitySelector::EntitySelector(const EntitySelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  agency_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_agency_id()) {
    agency_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agency_id(), 
      GetArenaForAllocation());
  }
  route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_route_id()) {
    route_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route_id(), 
      GetArenaForAllocation());
  }
  stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stop_id()) {
    stop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  ::memcpy(&route_type_, &from.route_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&route_type_)) + sizeof(direction_id_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.EntitySelector)
}

inline void EntitySelector::SharedCtor() {
agency_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&trip_)) + sizeof(direction_id_));
}

EntitySelector::~EntitySelector() {
  // @@protoc_insertion_point(destructor:transit_realtime.EntitySelector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EntitySelector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agency_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_;
}

void EntitySelector::ArenaDtor(void* object) {
  EntitySelector* _this = reinterpret_cast< EntitySelector* >(object);
  (void)_this;
}
void EntitySelector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntitySelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntitySelector::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.EntitySelector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      agency_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      route_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      stop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&route_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_id_) -
        reinterpret_cast<char*>(&route_type_)) + sizeof(direction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntitySelector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string agency_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agency_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.EntitySelector.agency_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string route_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_route_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.EntitySelector.route_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 route_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_route_type(&has_bits);
          route_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stop_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.EntitySelector.stop_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_direction_id(&has_bits);
          direction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntitySelector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.EntitySelector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string agency_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_agency_id().data(), static_cast<int>(this->_internal_agency_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.agency_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agency_id(), target);
  }

  // optional string route_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.route_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_id(), target);
  }

  // optional int32 route_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_route_type(), target);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trip(this), target, stream);
  }

  // optional string stop_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.stop_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stop_id(), target);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_direction_id(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.EntitySelector)
  return target;
}

size_t EntitySelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.EntitySelector)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string agency_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_agency_id());
    }

    // optional string route_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_id());
    }

    // optional string stop_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_id());
    }

    // optional .transit_realtime.TripDescriptor trip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trip_);
    }

    // optional int32 route_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_route_type());
    }

    // optional uint32 direction_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direction_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntitySelector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EntitySelector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntitySelector::GetClassData() const { return &_class_data_; }

void EntitySelector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EntitySelector *>(to)->MergeFrom(
      static_cast<const EntitySelector &>(from));
}


void EntitySelector::MergeFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.EntitySelector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_agency_id(from._internal_agency_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_route_id(from._internal_route_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_stop_id(from._internal_stop_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from._internal_trip());
    }
    if (cached_has_bits & 0x00000010u) {
      route_type_ = from.route_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      direction_id_ = from.direction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.EntitySelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySelector::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_trip()) {
    if (!trip_->IsInitialized()) return false;
  }
  return true;
}

void EntitySelector::InternalSwap(EntitySelector* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agency_id_, lhs_arena,
      &other->agency_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_id_, lhs_arena,
      &other->route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stop_id_, lhs_arena,
      &other->stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntitySelector, direction_id_)
      + sizeof(EntitySelector::direction_id_)
      - PROTOBUF_FIELD_OFFSET(EntitySelector, trip_)>(
          reinterpret_cast<char*>(&trip_),
          reinterpret_cast<char*>(&other->trip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntitySelector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[15]);
}

// ===================================================================

class TranslatedString_Translation::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslatedString_Translation>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TranslatedString_Translation::TranslatedString_Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TranslatedString.Translation)
}
TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString.Translation)
}

inline void TranslatedString_Translation::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranslatedString_Translation::~TranslatedString_Translation() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString.Translation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranslatedString_Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranslatedString_Translation::ArenaDtor(void* object) {
  TranslatedString_Translation* _this = reinterpret_cast< TranslatedString_Translation* >(object);
  (void)_this;
}
void TranslatedString_Translation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranslatedString_Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslatedString_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString.Translation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedString_Translation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TranslatedString.Translation.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TranslatedString.Translation.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedString_Translation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString.Translation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString.Translation)
  return target;
}

size_t TranslatedString_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString.Translation)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required string text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedString_Translation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranslatedString_Translation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedString_Translation::GetClassData() const { return &_class_data_; }

void TranslatedString_Translation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranslatedString_Translation *>(to)->MergeFrom(
      static_cast<const TranslatedString_Translation &>(from));
}


void TranslatedString_Translation::MergeFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TranslatedString_Translation::InternalSwap(TranslatedString_Translation* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedString_Translation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[16]);
}

// ===================================================================

class TranslatedString::_Internal {
 public:
};

TranslatedString::TranslatedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  translation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TranslatedString)
}
TranslatedString::TranslatedString(const TranslatedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      translation_(from.translation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString)
}

inline void TranslatedString::SharedCtor() {
}

TranslatedString::~TranslatedString() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranslatedString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TranslatedString::ArenaDtor(void* object) {
  TranslatedString* _this = reinterpret_cast< TranslatedString* >(object);
  (void)_this;
}
void TranslatedString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranslatedString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslatedString::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  translation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_translation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_translation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_translation(i), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString)
  return target;
}

size_t TranslatedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  total_size += 1UL * this->_internal_translation_size();
  for (const auto& msg : this->translation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranslatedString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedString::GetClassData() const { return &_class_data_; }

void TranslatedString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranslatedString *>(to)->MergeFrom(
      static_cast<const TranslatedString &>(from));
}


void TranslatedString::MergeFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  translation_.MergeFrom(from.translation_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(translation_))
    return false;
  return true;
}

void TranslatedString::InternalSwap(TranslatedString* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  translation_.InternalSwap(&other->translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[17]);
}

// ===================================================================

class TranslatedImage_LocalizedImage::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslatedImage_LocalizedImage>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TranslatedImage_LocalizedImage::TranslatedImage_LocalizedImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TranslatedImage.LocalizedImage)
}
TranslatedImage_LocalizedImage::TranslatedImage_LocalizedImage(const TranslatedImage_LocalizedImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_media_type()) {
    media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_type(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedImage.LocalizedImage)
}

inline void TranslatedImage_LocalizedImage::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranslatedImage_LocalizedImage::~TranslatedImage_LocalizedImage() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedImage.LocalizedImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranslatedImage_LocalizedImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranslatedImage_LocalizedImage::ArenaDtor(void* object) {
  TranslatedImage_LocalizedImage* _this = reinterpret_cast< TranslatedImage_LocalizedImage* >(object);
  (void)_this;
}
void TranslatedImage_LocalizedImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranslatedImage_LocalizedImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslatedImage_LocalizedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedImage.LocalizedImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      media_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedImage_LocalizedImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TranslatedImage.LocalizedImage.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string media_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_media_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TranslatedImage.LocalizedImage.media_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.TranslatedImage.LocalizedImage.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedImage_LocalizedImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedImage.LocalizedImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedImage.LocalizedImage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required string media_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedImage.LocalizedImage.media_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_media_type(), target);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedImage.LocalizedImage.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedImage.LocalizedImage)
  return target;
}

size_t TranslatedImage_LocalizedImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transit_realtime.TranslatedImage.LocalizedImage)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_media_type()) {
    // required string media_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_type());
  }

  return total_size;
}
size_t TranslatedImage_LocalizedImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedImage.LocalizedImage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required string media_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedImage_LocalizedImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranslatedImage_LocalizedImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedImage_LocalizedImage::GetClassData() const { return &_class_data_; }

void TranslatedImage_LocalizedImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranslatedImage_LocalizedImage *>(to)->MergeFrom(
      static_cast<const TranslatedImage_LocalizedImage &>(from));
}


void TranslatedImage_LocalizedImage::MergeFrom(const TranslatedImage_LocalizedImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedImage.LocalizedImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_media_type(from._internal_media_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language(from._internal_language());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedImage_LocalizedImage::CopyFrom(const TranslatedImage_LocalizedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedImage.LocalizedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedImage_LocalizedImage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TranslatedImage_LocalizedImage::InternalSwap(TranslatedImage_LocalizedImage* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &media_type_, lhs_arena,
      &other->media_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedImage_LocalizedImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[18]);
}

// ===================================================================

class TranslatedImage::_Internal {
 public:
};

TranslatedImage::TranslatedImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  localized_image_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.TranslatedImage)
}
TranslatedImage::TranslatedImage(const TranslatedImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      localized_image_(from.localized_image_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedImage)
}

inline void TranslatedImage::SharedCtor() {
}

TranslatedImage::~TranslatedImage() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranslatedImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TranslatedImage::ArenaDtor(void* object) {
  TranslatedImage* _this = reinterpret_cast< TranslatedImage* >(object);
  (void)_this;
}
void TranslatedImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranslatedImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslatedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  localized_image_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localized_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_localized_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_localized_image(i), target, stream);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedImage)
  return target;
}

size_t TranslatedImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedImage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image = 1;
  total_size += 1UL * this->_internal_localized_image_size();
  for (const auto& msg : this->localized_image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranslatedImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedImage::GetClassData() const { return &_class_data_; }

void TranslatedImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranslatedImage *>(to)->MergeFrom(
      static_cast<const TranslatedImage &>(from));
}


void TranslatedImage::MergeFrom(const TranslatedImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  localized_image_.MergeFrom(from.localized_image_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedImage::CopyFrom(const TranslatedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedImage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(localized_image_))
    return false;
  return true;
}

void TranslatedImage::InternalSwap(TranslatedImage* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  localized_image_.InternalSwap(&other->localized_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[19]);
}

// ===================================================================

class Shape::_Internal {
 public:
  using HasBits = decltype(std::declval<Shape>()._has_bits_);
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_polyline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Shape::Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:transit_realtime.Shape)
}
Shape::Shape(const Shape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  shape_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shape_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shape_id()) {
    shape_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape_id(), 
      GetArenaForAllocation());
  }
  encoded_polyline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_polyline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encoded_polyline()) {
    encoded_polyline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_polyline(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Shape)
}

inline void Shape::SharedCtor() {
shape_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shape_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encoded_polyline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_polyline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:transit_realtime.Shape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Shape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shape_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_polyline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Shape::ArenaDtor(void* object) {
  Shape* _this = reinterpret_cast< Shape* >(object);
  (void)_this;
}
void Shape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Shape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shape_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_polyline_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string shape_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shape_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.Shape.shape_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string encoded_polyline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoded_polyline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transit_realtime.Shape.encoded_polyline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 16000u) ||
        (72000u <= tag && tag < 80000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Shape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string shape_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shape_id().data(), static_cast<int>(this->_internal_shape_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.Shape.shape_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shape_id(), target);
  }

  // optional string encoded_polyline = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoded_polyline().data(), static_cast<int>(this->_internal_encoded_polyline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "transit_realtime.Shape.encoded_polyline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoded_polyline(), target);
  }

  // Extension range [1000, 10000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Shape)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string shape_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shape_id());
    }

    // optional string encoded_polyline = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encoded_polyline());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shape::GetClassData() const { return &_class_data_; }

void Shape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shape *>(to)->MergeFrom(
      static_cast<const Shape &>(from));
}


void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shape_id(from._internal_shape_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_encoded_polyline(from._internal_encoded_polyline());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Shape::InternalSwap(Shape* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shape_id_, lhs_arena,
      &other->shape_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_polyline_, lhs_arena,
      &other->encoded_polyline_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Shape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto_getter, &descriptor_table_gtfs_2drealtime_2eproto_once,
      file_level_metadata_gtfs_2drealtime_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transit_realtime
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedMessage* Arena::CreateMaybeMessage< ::transit_realtime::FeedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::FeedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedHeader* Arena::CreateMaybeMessage< ::transit_realtime::FeedHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::FeedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedEntity* Arena::CreateMaybeMessage< ::transit_realtime::FeedEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::FeedEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_StopTimeEvent* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_StopTimeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripUpdate_StopTimeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_StopTimeUpdate* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_StopTimeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripUpdate_StopTimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_TripProperties* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_TripProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripUpdate_TripProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehiclePosition_CarriageDetails* Arena::CreateMaybeMessage< ::transit_realtime::VehiclePosition_CarriageDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::VehiclePosition_CarriageDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehiclePosition* Arena::CreateMaybeMessage< ::transit_realtime::VehiclePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::VehiclePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::Alert* Arena::CreateMaybeMessage< ::transit_realtime::Alert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TimeRange* Arena::CreateMaybeMessage< ::transit_realtime::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::Position* Arena::CreateMaybeMessage< ::transit_realtime::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripDescriptor* Arena::CreateMaybeMessage< ::transit_realtime::TripDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TripDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehicleDescriptor* Arena::CreateMaybeMessage< ::transit_realtime::VehicleDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::VehicleDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::EntitySelector* Arena::CreateMaybeMessage< ::transit_realtime::EntitySelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::EntitySelector >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedString_Translation* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedString_Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TranslatedString_Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedString* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TranslatedString >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedImage_LocalizedImage* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedImage_LocalizedImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TranslatedImage_LocalizedImage >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedImage* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::TranslatedImage >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::Shape* Arena::CreateMaybeMessage< ::transit_realtime::Shape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transit_realtime::Shape >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
